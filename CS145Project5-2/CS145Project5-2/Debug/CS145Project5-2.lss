
CS145Project5-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  000003f0  00000484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800086  00800086  000004aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ccc  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093b  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000092a  00000000  00000000  00001c17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00002544  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000487  00000000  00000000  000026a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002de  00000000  00000000  00002b27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00002e05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 38       	cpi	r26, 0x8B	; 139
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 dd 01 	call	0x3ba	; 0x3ba <main>
  8a:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <bus2_init>:

void
bus2_init()
{
	/*initialize bus to write*/
	DDRA = 0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	PORTA =	0x00;
  96:	1b ba       	out	0x1b, r1	; 27
	
	/*initialize first 3 bits of bus to read*/
	CLR_BIT(DDRA, 0);
  98:	d0 98       	cbi	0x1a, 0	; 26
	CLR_BIT(DDRA, 1);
  9a:	d1 98       	cbi	0x1a, 1	; 26
	CLR_BIT(DDRA, 2);
  9c:	d2 98       	cbi	0x1a, 2	; 26
  9e:	08 95       	ret

000000a0 <TickFct_Defusal>:
inline void
TickFct_Defusal()
{
	unsigned char check;
	
	switch(Defusal_State) {   // Transitions
  a0:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <Defusal_State>
  a4:	88 23       	and	r24, r24
  a6:	19 f0       	breq	.+6      	; 0xae <TickFct_Defusal+0xe>
  a8:	83 30       	cpi	r24, 0x03	; 3
  aa:	c8 f0       	brcs	.+50     	; 0xde <TickFct_Defusal+0x3e>
  ac:	16 c0       	rjmp	.+44     	; 0xda <TickFct_Defusal+0x3a>
		case DEFU_START:  // Initial transition
		{
			check = CheckWires();
  ae:	0e 94 76 00 	call	0xec	; 0xec <CheckWires>
			if(check == 0)
  b2:	81 11       	cpse	r24, r1
  b4:	03 c0       	rjmp	.+6      	; 0xbc <TickFct_Defusal+0x1c>
			{
				Defusal_State = DEFU_START;
  b6:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <Defusal_State>
  ba:	08 95       	ret
			}
			else if (check == 1)
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	31 f4       	brne	.+12     	; 0xcc <TickFct_Defusal+0x2c>
			{
				Defusal_State = DEFU_PASS;
  c0:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <Defusal_State>
				SET_BIT(PORTD, 0);
  c4:	90 9a       	sbi	0x12, 0	; 18
				SET_BIT(PORTA, 4);
  c6:	dc 9a       	sbi	0x1b, 4	; 27
				SET_BIT(PORTA, 3);
  c8:	db 9a       	sbi	0x1b, 3	; 27
  ca:	08 95       	ret
			}
			else
			{
				Defusal_State = DEFU_FAIL;
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <Defusal_State>
				SET_BIT(PORTD, 1);
  d2:	91 9a       	sbi	0x12, 1	; 18
				CLR_BIT(PORTA, 4);
  d4:	dc 98       	cbi	0x1b, 4	; 27
				SET_BIT(PORTA, 3);
  d6:	db 9a       	sbi	0x1b, 3	; 27
  d8:	08 95       	ret
		case DEFU_FAIL://State signifying an incorrect wire has been "cut"
		Defusal_State = DEFU_FAIL;
		break;
		
		default:
		Defusal_State = DEFU_START;
  da:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <Defusal_State>
  de:	08 95       	ret

000000e0 <defuse_init>:

void
defuse_init()
{
	/* Initialize fuses to input with pull-up*/
	DDRD = 0x00;
  e0:	11 ba       	out	0x11, r1	; 17
	PORTD = 0xFC;
  e2:	8c ef       	ldi	r24, 0xFC	; 252
  e4:	82 bb       	out	0x12, r24	; 18
	
	/* Initialize finished LED*/
	SET_BIT(DDRD, 0);
  e6:	88 9a       	sbi	0x11, 0	; 17
	SET_BIT(DDRD, 1);
  e8:	89 9a       	sbi	0x11, 1	; 17
  ea:	08 95       	ret

000000ec <CheckWires>:
char wires[4] = {0x34,0x58,0x2C,0x54};

unsigned char CheckWires()
{
	char count  = 0;
	char port = PIND;
  ec:	60 b3       	in	r22, 0x10	; 16
	for(char i = LOWER_WIRES; i < UPPER_WIRES_P1; ++i)
	{
		if(((port>>i)&1) == ((wires[rnd]>>i)&1))
  ee:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <rnd>
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	e0 5a       	subi	r30, 0xA0	; 160
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	e0 81       	ld	r30, Z
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	90 e0       	ldi	r25, 0x00	; 0
extern unsigned char rnd;
char wires[4] = {0x34,0x58,0x2C,0x54};

unsigned char CheckWires()
{
	char count  = 0;
 100:	a0 e0       	ldi	r26, 0x00	; 0
	char port = PIND;
	for(char i = LOWER_WIRES; i < UPPER_WIRES_P1; ++i)
	{
		if(((port>>i)&1) == ((wires[rnd]>>i)&1))
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	ab 01       	movw	r20, r22
 106:	08 2e       	mov	r0, r24
 108:	02 c0       	rjmp	.+4      	; 0x10e <CheckWires+0x22>
 10a:	55 95       	asr	r21
 10c:	47 95       	ror	r20
 10e:	0a 94       	dec	r0
 110:	e2 f7       	brpl	.-8      	; 0x10a <CheckWires+0x1e>
 112:	9f 01       	movw	r18, r30
 114:	08 2e       	mov	r0, r24
 116:	02 c0       	rjmp	.+4      	; 0x11c <CheckWires+0x30>
 118:	35 95       	asr	r19
 11a:	27 95       	ror	r18
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <CheckWires+0x2c>
 120:	24 27       	eor	r18, r20
 122:	35 27       	eor	r19, r21
 124:	20 fd       	sbrc	r18, 0
 126:	04 c0       	rjmp	.+8      	; 0x130 <CheckWires+0x44>
		{
			if(((port>>i)&1) == 1)
 128:	40 ff       	sbrs	r20, 0
 12a:	04 c0       	rjmp	.+8      	; 0x134 <CheckWires+0x48>
			{
				++count;
 12c:	af 5f       	subi	r26, 0xFF	; 255
 12e:	02 c0       	rjmp	.+4      	; 0x134 <CheckWires+0x48>
			}
		}
		else
		{
			if(((port>>i)&1) == 1)
 130:	40 fd       	sbrc	r20, 0
 132:	09 c0       	rjmp	.+18     	; 0x146 <CheckWires+0x5a>
 134:	01 96       	adiw	r24, 0x01	; 1

unsigned char CheckWires()
{
	char count  = 0;
	char port = PIND;
	for(char i = LOWER_WIRES; i < UPPER_WIRES_P1; ++i)
 136:	87 30       	cpi	r24, 0x07	; 7
 138:	91 05       	cpc	r25, r1
 13a:	21 f7       	brne	.-56     	; 0x104 <CheckWires+0x18>
		}
		else
		{
			if(((port>>i)&1) == 1)
			{
				return 2;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	a3 30       	cpi	r26, 0x03	; 3
 140:	19 f0       	breq	.+6      	; 0x148 <CheckWires+0x5c>
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	08 95       	ret
 146:	82 e0       	ldi	r24, 0x02	; 2
	}
	if(count == 3)
		return 1;
	return 0;
	
 148:	08 95       	ret

0000014a <get_kbd_char>:
	CLR_BIT(DDRC, 4+r);
	PORTC = 0x00;
	
	return set;
	
}
 14a:	e0 e0       	ldi	r30, 0x00	; 0
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	41 e0       	ldi	r20, 0x01	; 1
 150:	50 e0       	ldi	r21, 0x00	; 0
 152:	2f c0       	rjmp	.+94     	; 0x1b2 <get_kbd_char+0x68>
 154:	75 b3       	in	r23, 0x15	; 21
 156:	ca 01       	movw	r24, r20
 158:	02 2e       	mov	r0, r18
 15a:	02 c0       	rjmp	.+4      	; 0x160 <get_kbd_char+0x16>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	0a 94       	dec	r0
 162:	e2 f7       	brpl	.-8      	; 0x15c <get_kbd_char+0x12>
 164:	87 2b       	or	r24, r23
 166:	85 bb       	out	0x15, r24	; 21
 168:	84 b3       	in	r24, 0x14	; 20
 16a:	8a 2b       	or	r24, r26
 16c:	84 bb       	out	0x14, r24	; 20
 16e:	85 b3       	in	r24, 0x15	; 21
 170:	86 23       	and	r24, r22
 172:	85 bb       	out	0x15, r24	; 21
 174:	83 b3       	in	r24, 0x13	; 19
 176:	94 b3       	in	r25, 0x14	; 20
 178:	96 23       	and	r25, r22
 17a:	94 bb       	out	0x14, r25	; 20
 17c:	15 ba       	out	0x15, r1	; 21
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 2e       	mov	r0, r18
 182:	02 c0       	rjmp	.+4      	; 0x188 <get_kbd_char+0x3e>
 184:	95 95       	asr	r25
 186:	87 95       	ror	r24
 188:	0a 94       	dec	r0
 18a:	e2 f7       	brpl	.-8      	; 0x184 <get_kbd_char+0x3a>
 18c:	80 fd       	sbrc	r24, 0
 18e:	08 c0       	rjmp	.+16     	; 0x1a0 <get_kbd_char+0x56>
 190:	ee 0f       	add	r30, r30
 192:	ff 1f       	adc	r31, r31
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	e2 0f       	add	r30, r18
 19a:	f3 1f       	adc	r31, r19
 19c:	31 96       	adiw	r30, 0x01	; 1
 19e:	19 c0       	rjmp	.+50     	; 0x1d2 <get_kbd_char+0x88>
 1a0:	2f 5f       	subi	r18, 0xFF	; 255
 1a2:	3f 4f       	sbci	r19, 0xFF	; 255
 1a4:	24 30       	cpi	r18, 0x04	; 4
 1a6:	31 05       	cpc	r19, r1
 1a8:	a9 f6       	brne	.-86     	; 0x154 <get_kbd_char+0xa>
 1aa:	31 96       	adiw	r30, 0x01	; 1
 1ac:	e4 30       	cpi	r30, 0x04	; 4
 1ae:	f1 05       	cpc	r31, r1
 1b0:	71 f0       	breq	.+28     	; 0x1ce <get_kbd_char+0x84>
 1b2:	cf 01       	movw	r24, r30
 1b4:	04 96       	adiw	r24, 0x04	; 4
 1b6:	9a 01       	movw	r18, r20
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <get_kbd_char+0x74>
 1ba:	22 0f       	add	r18, r18
 1bc:	33 1f       	adc	r19, r19
 1be:	8a 95       	dec	r24
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <get_kbd_char+0x70>
 1c2:	a2 2f       	mov	r26, r18
 1c4:	62 2f       	mov	r22, r18
 1c6:	60 95       	com	r22
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	c3 cf       	rjmp	.-122    	; 0x154 <get_kbd_char+0xa>
 1ce:	e0 e0       	ldi	r30, 0x00	; 0
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	ec 58       	subi	r30, 0x8C	; 140
 1d4:	ff 4f       	sbci	r31, 0xFF	; 255
 1d6:	80 81       	ld	r24, Z
 1d8:	08 95       	ret

000001da <kbd_init>:
/* Initializes the keyboard */
inline void 
kbd_init(void)
{
	/* Set pins as input and initialize pins to no connect (pull-up off)*/
	DDRC = 0x00;
 1da:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00;
 1dc:	15 ba       	out	0x15, r1	; 21
	
	SET_BIT(DDRB,0);
 1de:	b8 9a       	sbi	0x17, 0	; 23
	SET_BIT(DDRB,1);
 1e0:	b9 9a       	sbi	0x17, 1	; 23
	SET_BIT(DDRB,2);
 1e2:	ba 9a       	sbi	0x17, 2	; 23
	SET_BIT(DDRB,3);
 1e4:	bb 9a       	sbi	0x17, 3	; 23
	CLR_BIT(PORTB,0);
 1e6:	c0 98       	cbi	0x18, 0	; 24
	CLR_BIT(PORTB,1);
 1e8:	c1 98       	cbi	0x18, 1	; 24
	CLR_BIT(PORTB,2);
 1ea:	c2 98       	cbi	0x18, 2	; 24
	CLR_BIT(PORTB,3);
 1ec:	c3 98       	cbi	0x18, 3	; 24
 1ee:	08 95       	ret

000001f0 <TickFct_KBD>:

inline void
TickFct_KBD()
{
	char key;
	switch(KBD_State) {   // Transitions
 1f0:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <KBD_State>
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	09 f4       	brne	.+2      	; 0x1fa <TickFct_KBD+0xa>
 1f8:	55 c0       	rjmp	.+170    	; 0x2a4 <TickFct_KBD+0xb4>
 1fa:	28 f4       	brcc	.+10     	; 0x206 <TickFct_KBD+0x16>
 1fc:	88 23       	and	r24, r24
 1fe:	61 f0       	breq	.+24     	; 0x218 <TickFct_KBD+0x28>
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	69 f1       	breq	.+90     	; 0x25e <TickFct_KBD+0x6e>
 204:	a9 c0       	rjmp	.+338    	; 0x358 <TickFct_KBD+0x168>
 206:	84 30       	cpi	r24, 0x04	; 4
 208:	09 f4       	brne	.+2      	; 0x20c <TickFct_KBD+0x1c>
 20a:	a8 c0       	rjmp	.+336    	; 0x35c <TickFct_KBD+0x16c>
 20c:	08 f4       	brcc	.+2      	; 0x210 <TickFct_KBD+0x20>
 20e:	6d c0       	rjmp	.+218    	; 0x2ea <TickFct_KBD+0xfa>
 210:	85 30       	cpi	r24, 0x05	; 5
 212:	09 f4       	brne	.+2      	; 0x216 <TickFct_KBD+0x26>
 214:	8e c0       	rjmp	.+284    	; 0x332 <TickFct_KBD+0x142>
 216:	a0 c0       	rjmp	.+320    	; 0x358 <TickFct_KBD+0x168>
		case KBD_START:  // Initial transition
			key = get_kbd_char();
 218:	0e 94 a5 00 	call	0x14a	; 0x14a <get_kbd_char>
			if(key == combos[rnd][0])
 21c:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <rnd>
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	ee 0f       	add	r30, r30
 224:	ff 1f       	adc	r31, r31
 226:	ee 0f       	add	r30, r30
 228:	ff 1f       	adc	r31, r31
 22a:	ec 59       	subi	r30, 0x9C	; 156
 22c:	ff 4f       	sbci	r31, 0xFF	; 255
 22e:	90 81       	ld	r25, Z
 230:	89 13       	cpse	r24, r25
 232:	05 c0       	rjmp	.+10     	; 0x23e <TickFct_KBD+0x4e>
			{
				KBD_State = KBD_ONE;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <KBD_State>
				SET_BIT(PORTB, 0);
 23a:	c0 9a       	sbi	0x18, 0	; 24
 23c:	08 95       	ret
			}
			else if(key != ' ')
 23e:	80 32       	cpi	r24, 0x20	; 32
 240:	09 f4       	brne	.+2      	; 0x244 <TickFct_KBD+0x54>
 242:	8c c0       	rjmp	.+280    	; 0x35c <TickFct_KBD+0x16c>
			{
				KBD_State = KBD_FAIL;
 244:	85 e0       	ldi	r24, 0x05	; 5
 246:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <KBD_State>
				flash = 1;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <flash>
				SET_BIT(PORTB, 0);
 250:	c0 9a       	sbi	0x18, 0	; 24
				SET_BIT(PORTB, 1);
 252:	c1 9a       	sbi	0x18, 1	; 24
				SET_BIT(PORTB, 2);
 254:	c2 9a       	sbi	0x18, 2	; 24
				SET_BIT(PORTB, 3);
 256:	c3 9a       	sbi	0x18, 3	; 24
				CLR_BIT(PORTA, 6);
 258:	de 98       	cbi	0x1b, 6	; 27
				SET_BIT(PORTA, 5);
 25a:	dd 9a       	sbi	0x1b, 5	; 27
 25c:	08 95       	ret
			}
			break;
		
		case KBD_ONE://State signifying the correct wire have been "cut"
			key = get_kbd_char();
 25e:	0e 94 a5 00 	call	0x14a	; 0x14a <get_kbd_char>
			if(key == combos[rnd][1])
 262:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <rnd>
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	ee 0f       	add	r30, r30
 26a:	ff 1f       	adc	r31, r31
 26c:	ee 0f       	add	r30, r30
 26e:	ff 1f       	adc	r31, r31
 270:	ec 59       	subi	r30, 0x9C	; 156
 272:	ff 4f       	sbci	r31, 0xFF	; 255
 274:	91 81       	ldd	r25, Z+1	; 0x01
 276:	89 13       	cpse	r24, r25
 278:	05 c0       	rjmp	.+10     	; 0x284 <TickFct_KBD+0x94>
			{
				KBD_State = KBD_TWO;
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <KBD_State>
				SET_BIT(PORTB, 1);
 280:	c1 9a       	sbi	0x18, 1	; 24
 282:	08 95       	ret
			}
			else if(key != ' ')
 284:	80 32       	cpi	r24, 0x20	; 32
 286:	09 f4       	brne	.+2      	; 0x28a <TickFct_KBD+0x9a>
 288:	69 c0       	rjmp	.+210    	; 0x35c <TickFct_KBD+0x16c>
			{
				KBD_State = KBD_FAIL;
 28a:	85 e0       	ldi	r24, 0x05	; 5
 28c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <KBD_State>
				flash = 1;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <flash>
				SET_BIT(PORTB, 0);
 296:	c0 9a       	sbi	0x18, 0	; 24
				SET_BIT(PORTB, 1);
 298:	c1 9a       	sbi	0x18, 1	; 24
				SET_BIT(PORTB, 2);
 29a:	c2 9a       	sbi	0x18, 2	; 24
				SET_BIT(PORTB, 3);
 29c:	c3 9a       	sbi	0x18, 3	; 24
				CLR_BIT(PORTA, 6);
 29e:	de 98       	cbi	0x1b, 6	; 27
				SET_BIT(PORTA, 5);
 2a0:	dd 9a       	sbi	0x1b, 5	; 27
 2a2:	08 95       	ret
			}
			break;
		
		case KBD_TWO://State signifying the correct wire have been "cut"
			key = get_kbd_char();
 2a4:	0e 94 a5 00 	call	0x14a	; 0x14a <get_kbd_char>
			if(key == combos[rnd][2])
 2a8:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <rnd>
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	ee 0f       	add	r30, r30
 2b0:	ff 1f       	adc	r31, r31
 2b2:	ee 0f       	add	r30, r30
 2b4:	ff 1f       	adc	r31, r31
 2b6:	ec 59       	subi	r30, 0x9C	; 156
 2b8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ba:	92 81       	ldd	r25, Z+2	; 0x02
 2bc:	89 13       	cpse	r24, r25
 2be:	05 c0       	rjmp	.+10     	; 0x2ca <TickFct_KBD+0xda>
			{
				KBD_State = KBD_THREE;
 2c0:	83 e0       	ldi	r24, 0x03	; 3
 2c2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <KBD_State>
				SET_BIT(PORTB, 2);
 2c6:	c2 9a       	sbi	0x18, 2	; 24
 2c8:	08 95       	ret
			}
			else if(key != ' ')
 2ca:	80 32       	cpi	r24, 0x20	; 32
 2cc:	09 f4       	brne	.+2      	; 0x2d0 <TickFct_KBD+0xe0>
 2ce:	46 c0       	rjmp	.+140    	; 0x35c <TickFct_KBD+0x16c>
			{
				KBD_State = KBD_FAIL;
 2d0:	85 e0       	ldi	r24, 0x05	; 5
 2d2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <KBD_State>
				flash = 1;
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <flash>
				SET_BIT(PORTB, 0);
 2dc:	c0 9a       	sbi	0x18, 0	; 24
				SET_BIT(PORTB, 1);
 2de:	c1 9a       	sbi	0x18, 1	; 24
				SET_BIT(PORTB, 2);
 2e0:	c2 9a       	sbi	0x18, 2	; 24
				SET_BIT(PORTB, 3);
 2e2:	c3 9a       	sbi	0x18, 3	; 24
				CLR_BIT(PORTA, 6);
 2e4:	de 98       	cbi	0x1b, 6	; 27
				SET_BIT(PORTA, 5);
 2e6:	dd 9a       	sbi	0x1b, 5	; 27
 2e8:	08 95       	ret
			}
			break;
		
		case KBD_THREE:
			key = get_kbd_char();
 2ea:	0e 94 a5 00 	call	0x14a	; 0x14a <get_kbd_char>
			if(key == combos[rnd][3])
 2ee:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <rnd>
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	ee 0f       	add	r30, r30
 2f6:	ff 1f       	adc	r31, r31
 2f8:	ee 0f       	add	r30, r30
 2fa:	ff 1f       	adc	r31, r31
 2fc:	ec 59       	subi	r30, 0x9C	; 156
 2fe:	ff 4f       	sbci	r31, 0xFF	; 255
 300:	93 81       	ldd	r25, Z+3	; 0x03
 302:	89 13       	cpse	r24, r25
 304:	07 c0       	rjmp	.+14     	; 0x314 <TickFct_KBD+0x124>
			{
				KBD_State = KBD_PASS;
 306:	84 e0       	ldi	r24, 0x04	; 4
 308:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <KBD_State>
				SET_BIT(PORTB, 3);
 30c:	c3 9a       	sbi	0x18, 3	; 24
				SET_BIT(PORTA, 6);
 30e:	de 9a       	sbi	0x1b, 6	; 27
				SET_BIT(PORTA, 5);
 310:	dd 9a       	sbi	0x1b, 5	; 27
 312:	08 95       	ret
			}
			else if(key != ' ')
 314:	80 32       	cpi	r24, 0x20	; 32
 316:	11 f1       	breq	.+68     	; 0x35c <TickFct_KBD+0x16c>
			{
				KBD_State = KBD_FAIL;
 318:	85 e0       	ldi	r24, 0x05	; 5
 31a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <KBD_State>
				flash = 1;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <flash>
				SET_BIT(PORTB, 0);
 324:	c0 9a       	sbi	0x18, 0	; 24
				SET_BIT(PORTB, 1);
 326:	c1 9a       	sbi	0x18, 1	; 24
				SET_BIT(PORTB, 2);
 328:	c2 9a       	sbi	0x18, 2	; 24
				SET_BIT(PORTB, 3);
 32a:	c3 9a       	sbi	0x18, 3	; 24
				CLR_BIT(PORTA, 6);
 32c:	de 98       	cbi	0x1b, 6	; 27
				SET_BIT(PORTA, 5);
 32e:	dd 9a       	sbi	0x1b, 5	; 27
 330:	08 95       	ret
			KBD_State = KBD_PASS;
			break;

		case KBD_FAIL://State signifying an incorrect wire has been "cut"
			KBD_State = KBD_FAIL;
			if(flash == 1)
 332:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <flash>
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	39 f4       	brne	.+14     	; 0x348 <TickFct_KBD+0x158>
			{
				CLR_BIT(PORTB, 0);
 33a:	c0 98       	cbi	0x18, 0	; 24
				CLR_BIT(PORTB, 1);
 33c:	c1 98       	cbi	0x18, 1	; 24
				CLR_BIT(PORTB, 2);
 33e:	c2 98       	cbi	0x18, 2	; 24
				CLR_BIT(PORTB, 3);
 340:	c3 98       	cbi	0x18, 3	; 24
				flash = 0;
 342:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <flash>
 346:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTB, 0);
 348:	c0 9a       	sbi	0x18, 0	; 24
				SET_BIT(PORTB, 1);
 34a:	c1 9a       	sbi	0x18, 1	; 24
				SET_BIT(PORTB, 2);
 34c:	c2 9a       	sbi	0x18, 2	; 24
				SET_BIT(PORTB, 3);
 34e:	c3 9a       	sbi	0x18, 3	; 24
				flash = 1;
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <flash>
 356:	08 95       	ret
			}
			break;
		
		default:
			KBD_State = KBD_START;
 358:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <KBD_State>
 35c:	08 95       	ret

0000035e <timer_init>:

/* This function initializes timer 1 for use by the state machine*/
void
timer_init()
{
	TCCR1A = 0x00;
 35e:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 3;
 360:	83 e0       	ldi	r24, 0x03	; 3
 362:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = (unsigned short)(65536 - (XTAL_FRQ / 64)*0.25);   // for 250 msec at 16 MHz
 364:	8e ee       	ldi	r24, 0xEE	; 238
 366:	95 e8       	ldi	r25, 0x85	; 133
 368:	9d bd       	out	0x2d, r25	; 45
 36a:	8c bd       	out	0x2c, r24	; 44
	TIMSK = (1 << TOIE1) ;
 36c:	84 e0       	ldi	r24, 0x04	; 4
 36e:	89 bf       	out	0x39, r24	; 57
	SET_BIT(TIFR, TOV1);
 370:	88 b7       	in	r24, 0x38	; 56
 372:	84 60       	ori	r24, 0x04	; 4
 374:	88 bf       	out	0x38, r24	; 56
	sei();
 376:	78 94       	sei
 378:	08 95       	ret

0000037a <__vector_9>:
}

/* Timer 1 interrupt used for the clock the system is displaying */
ISR (TIMER1_OVF_vect)    // Timer1 ISR
{
 37a:	1f 92       	push	r1
 37c:	0f 92       	push	r0
 37e:	0f b6       	in	r0, 0x3f	; 63
 380:	0f 92       	push	r0
 382:	11 24       	eor	r1, r1
 384:	8f 93       	push	r24
 386:	9f 93       	push	r25
	TimerFlag = 1;
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
	TCNT1 = (unsigned short)(65536 - (XTAL_FRQ / 64)*0.25);   // for 250 msec at 16 MHz
 38e:	8e ee       	ldi	r24, 0xEE	; 238
 390:	95 e8       	ldi	r25, 0x85	; 133
 392:	9d bd       	out	0x2d, r25	; 45
 394:	8c bd       	out	0x2c, r24	; 44
	SET_BIT(TIFR, TOV1);
 396:	88 b7       	in	r24, 0x38	; 56
 398:	84 60       	ori	r24, 0x04	; 4
 39a:	88 bf       	out	0x38, r24	; 56
}
 39c:	9f 91       	pop	r25
 39e:	8f 91       	pop	r24
 3a0:	0f 90       	pop	r0
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	0f 90       	pop	r0
 3a6:	1f 90       	pop	r1
 3a8:	18 95       	reti

000003aa <rand_init>:
}

void 
rand_init()
{
	while (!GET_BIT(PINA, 0));
 3aa:	c8 9b       	sbis	0x19, 0	; 25
 3ac:	fe cf       	rjmp	.-4      	; 0x3aa <rand_init>
	rnd = (PINA >> 1) & 0x03;
 3ae:	89 b3       	in	r24, 0x19	; 25
 3b0:	86 95       	lsr	r24
 3b2:	83 70       	andi	r24, 0x03	; 3
 3b4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <rnd>
 3b8:	08 95       	ret

000003ba <main>:
	SET_BIT(TIFR, TOV1);
}

int main(void)
{
	bus2_init();
 3ba:	0e 94 49 00 	call	0x92	; 0x92 <bus2_init>
    kbd_init();
 3be:	0e 94 ed 00 	call	0x1da	; 0x1da <kbd_init>
	defuse_init();
 3c2:	0e 94 70 00 	call	0xe0	; 0xe0 <defuse_init>
	rand_init();
 3c6:	0e 94 d5 01 	call	0x3aa	; 0x3aa <rand_init>
	timer_init();
 3ca:	0e 94 af 01 	call	0x35e	; 0x35e <timer_init>
	Defusal_State = DEFU_START;
 3ce:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <Defusal_State>
	KBD_State = KBD_START;
 3d2:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <KBD_State>
    while (1) 
    {
		TickFct_Defusal();
 3d6:	0e 94 50 00 	call	0xa0	; 0xa0 <TickFct_Defusal>
		TickFct_KBD();
 3da:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <TickFct_KBD>
		while (!TimerFlag){}  // Wait for BL's period
 3de:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 3e2:	88 23       	and	r24, r24
 3e4:	e1 f3       	breq	.-8      	; 0x3de <main+0x24>
		TimerFlag = 0;        // Lower flag
 3e6:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__data_end>
    }
 3ea:	f5 cf       	rjmp	.-22     	; 0x3d6 <main+0x1c>

000003ec <_exit>:
 3ec:	f8 94       	cli

000003ee <__stop_program>:
 3ee:	ff cf       	rjmp	.-2      	; 0x3ee <__stop_program>
